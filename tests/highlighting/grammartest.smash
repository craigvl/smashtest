// Use this file to test .smash syntax highlighting

// ******** Function calls ********

Function call

Function call
    Function call

Function call
    Function call   // comment here
    Function call 'this is a string not a // comment' "this is a string not a // comment" // comment here

Function call 'input' and "input" and [input] and {input} and {{input}} and '{input} and input' and ['input' and "input"]

Function call with \\ special \" chars "string \" " {"var"}

// ******** Function declarations ********

* Function declaration
    Step one
        Step two

* Function declaration {{var}} and 'string' 'http://site.com'
    Step one

* Function declaration {{var}} and "string" [string]
    Step one

    * Function declaration in context // comment
        Step

* Bracketed function declaration [ // comment
    Step // comment
]

** Private function declaration

*** Hook

**** Too many asterisks

// ******** Vars ********

{var}
{{var}}
{global var}='something'
{global var} is 'something'
{var1} = '1', {{var2}}='2', {{var3}} = "3", {var4} = [4]
{{local var}}="something else here {var} {var:}", {{local var2}} = "something {var inside string}"

// ******** Strings ********

'string'
"string"
[string]

"something \" "
[ 1st 'Login' box near 'title' {var} ] outside [str] outside
outside 'single\'\\\'quote\n' outside "double\"quote\\\"" outside [ "bracketed\"" 'string\'' \] ] outside
outside 'string' outside 'string' outside
outside "string" outside "string" outside
outside [string] outside [string] outside
{lookahead var:} {{{var in three squigglies}}} {a} {}

// ******** Step blocks ********

Step block step 1
Step block step 2
Step block step 3

    Under step block

[
]

[
    Step in multi-level step block
]

[ // comment
    Step in multi-level step block 1 'input' // comment
        Step in multi-level step block 2

    Step in multi-level step block 3
]
    Step underneath

Named multi-level step block [
    Step 'input'
]

Named multi-level step block + [ // comment
    Named multi-level step block + [
        + [
        ]
    ]
]

+ +? [
] // comment

[ // comment
    Step
    Step
    - Textual step
]

..
Sequential step block step 1
Sequential step block step 2
Sequential step block step 3 -

// ******** Textual steps ********

- Textual step
Textual step 'non // comment non-string' - // in textual steps, 'strings' should not be highlighted as strings
- Textual step 'non-string' +
Textual step 'non-string' + - ! !! // BUG: this only works when - modifier is first or last

// ******** Comments ********

// comment on its own line
    // comment on its own line

// ******** Groups ********

Step with groups #group1 #group2 // comment
- Step with groups #group1 #group2 // comment
#group1 + Step with groups #group2 #group-3 // comment

// ******** Modifiers ********

- + +? ! Modifiers+?- - + +? !

Step ? +? // comment
Step! ! // comment

Step -s
Step .s
Step $s
Step -
Step !!
Step !
Step ..
Step +?
Step +
Step #group
Step ~~
Step ~
Step $

-s Step
.s Step
$s Step
- Step
!! Step
! Step
.. Step
+? Step
+ Step
#group Step
~~ Step
~ Step
$ Step

Step -s .s $s - !! ! .. +? + #group #med
-s .s $s - !! ! .. +? + #group #med Step
 -s .s $s - !! ! .. +? + #group #med Step -s .s $s - !! ! .. +? + #group #med

 ~ -s .s $s - !! ! .. +? + #group #med Step -s .s $s - !! ! .. +? + #group #med // comment
 ~~ -s .s $s - !! ! .. +? + #group #med Step -s .s $s - !! ! .. +? + #group #med // comment
 $ -s .s $s - !! ! .. +? + #group #med Step -s .s $s - !! ! .. +? + #group #med // comment

.. * Func - +?
$ .. * Func - +?
- +? * NonFunc - +?

// ******** Only and Debug ********

Only $
Debug ~
Debug ~~

$ Only
~ Debug
~~ Debug

Non-debug step // comment ~ comment // BUG: the ~ should be part of the comment
Non-debug ~ step // BUG: ~ should be part of the step name

Debug and other modifiers + ~ ..
+ ~ .. Debug and other modifiers

~ Debug code {var} {var2:} 'string' block {
}
    Debug code block ~ {
        throw new Error("oops");
    }

// ******** Code blocks ********

Code block 'non-string' {var} {
    throw new Error("oops");
    if(something) {
        something();
    }
    return 6;
}

* Function declaration code block {
    throw new Error("oops");
    if(something) {
        something();
    }
    return 6;
}

$ Code block ~ {
throw new Error("oops");
if(something) {
    something();
}
return 6;
}

.. Code block {
    throw new Error("oops");
    if(something) {
        something();
    }
    return 6;
}
    Code block {
        throw new Error("oops");
    }
    Code block {
    }
    Code block {

    }

* Function declaration {{var}} 'string' {
    // code block
    let x = 5 + 5;
    setTimeout(() => {
        console.log("something");
    }, 1000);

    return new Object();
}

// ******** Hooks ********

*** Before every branch {
    throw new Error("oops");
}

*** AFTER every Branch {
    throw new Error("oops");
}

*** Before  every  step {
    throw new Error("oops");
}

*** After every step {
    throw new Error("oops");
}

*** Before Everything  {
    throw new Error("oops");
}

*** After Everything {
    throw new Error("oops");
}

*** Invalid hook name {
    throw new Error("oops");
}
